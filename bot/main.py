import json
from datetime import datetime
from random import randint

from sqlalchemy import desc
from sqlalchemy.orm import Session
from telebot import types, TeleBot
from telebot.types import Message

from bot.database import engine
from bot.scripts import save_dict_to_redis, save_to_redis
from config import BOT_TOKEN, ADMINS, PROMOTERS
from bot.models import Ticket, Event

import redis


class Bot(TeleBot):
	def __init__(self):
		super().__init__(token=BOT_TOKEN)


bot = Bot()
r = redis.Redis(host='localhost', port=6379, db=0)


# –°—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start'])
def handle_start(message: Message):
	promoter = message.text.split(maxsplit=1)[1] if len(message.text.split()) > 1 else None

	markup = types.InlineKeyboardMarkup()
	buy_ticket = types.InlineKeyboardButton('–ö—É–ø–∏—Ç–∏ –∫–≤–∏—Ç–æ–∫ üéüÔ∏è', callback_data=f'buy_ticket {promoter}')

	markup.add(buy_ticket)

	with Session(engine) as session:
		try:
			event = session.query(Event).order_by(desc(Event.id)).first()
			if event:
				bot.send_message(message.chat.id, f"Paradise Seasons Bot"
												  f"\n"
												  f"\n–ù–∞–π–±–ª–∏–∂—á–∏–π –∑–∞—Ö—ñ–¥ üéâ: {event.event_name}"
												  f"\n–î–∞—Ç–∞ üóìÔ∏è: {event.event_date}"
												  f"\n–¢–∏–ø–æ–≤–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å üíµ: {event.event_price_default}"
												  f"\n–í—ñ–ø –≤–∞—Ä—Ç—ñ—Å—Ç—å üí∏: {event.event_price_vip}"
												  f"\n–¶—ñ–Ω–∞ –∫—ñ–Ω—Ü–µ–≤–æ–≥–æ —Ç–µ—Ä–º—ñ–Ω—É üíµ: {event.event_price_deadline}",
								 reply_markup=markup)
			else:
				bot.send_message(message.chat.id, "–ó–∞—Ö–æ–¥—ñ–≤ –ø–æ–∫–∏ –Ω–µ–º–∞—î üôÖ‚Äç‚ôÄÔ∏è")
		except Exception as e:
			print(e)
			bot.send_message(message.chat.id, "–ü–æ–º–∏–ª–∫–∞ ‚ùå –ø—ñ–¥ —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–π–±–ª–∏–∂—á–æ—ó –ø–æ–¥—ñ—ó ü™©")


# –í—ã–∑–æ–≤ –∞–¥–º–∏–Ω–∫–∏
@bot.message_handler(commands=['admin'])
def handle_admin(message: Message):
	if message.from_user.id in ADMINS:
		markup = types.InlineKeyboardMarkup()
		add_event = types.InlineKeyboardButton('–î–æ–¥–∞—Ç–∏ –ø–æ–¥—ñ—é üìÜ', callback_data='add_event')
		check_tickets = types.InlineKeyboardButton('–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫–≤–∏—Ç–∫–∏ üéü', callback_data='check_tickets')
		check_ticket_buy_request = types.InlineKeyboardButton('–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ üßê –∑–∞—è–≤–∫–∏ –Ω–∞ –∫—É–ø—ñ–≤–ª—é –∫–≤–∏—Ç–∫–∞ üéü ',
															  callback_data='check_ticket_buy_request')

		markup.add(add_event, check_tickets, check_ticket_buy_request)
		bot.send_message(message.chat.id, "–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å üëë", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def keyboard_listener(call: types.CallbackQuery):
	data = call.data.split(' ')

	if call.data == 'add_event':
		bot.send_message(call.message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø–æ–¥—ñ—ó üé§")
		bot.register_next_step_handler(call.message, handle_event_name_input)

	elif data[0] == 'buy_ticket' or call.data == 'buy_ticket':
		bot.send_message(call.message.chat.id, f"–ü–µ—Ä–µ–∫–∞–∑ –≥—Ä–æ—à–µ–π –Ω–∞ –±–∞–Ω–∫—ñ–≤—Å—å–∫—É –∫–∞—Ä—Ç—É üí≥ XXXX XXXXXX XXXXX"
											   f"\n–ü–æ—Ç—ñ–º –Ω–∞–ø–∏—à—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏üí≥, –∑ —è–∫–æ—ó –±—É–ª–∏ –ø–µ—Ä–µ—Ä–∞—Ö–æ–≤–∞–Ω—ñ –∫–æ—à—Ç–∏, —É —Ñ–æ—Ä–º–∞—Ç—ñ XXXXXX XXXXX XXXX XXXX")
		bot.register_next_step_handler(call.message, bank_card_input, data[1] if len(data) > 1 else None)

	elif call.data == 'check_tickets':
		bot.send_message(call.message.chat.id, "–í–≤–µ–¥—ñ—Ç—å üÜî –∫–≤–∏—Ç–∫–∞")
		bot.register_next_step_handler(call.message, check_ticket)

	elif call.data == 'accept':
		try:
			ticket_id_r = r.get(f'ticket_id_{call.from_user.id}')
			decoded_ticket_id_r = ticket_id_r.decode('utf-8')

			with Session(engine) as session:
				ticket = session.query(Ticket).filter(Ticket.ticket_id == decoded_ticket_id_r).first()
				ticket.passed = True
				session.commit()
			r.delete(f'ticket_id_{call.from_user.id}')
			bot.send_message(call.message.chat.id, "–ö–≤–∏—Ç–æ–∫ üéüÔ∏è —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–π–Ω—è—Ç–∏–π ‚úÖ")

		except Exception as e:
			print(e)
			bot.send_message(call.message.chat.id, "–ü–æ–º–∏–ª–∫–∞ ‚ùå–ø—Ä–∏ –ø—Ä–∏–π–º–∞–Ω–Ω—ñ –∫–≤–∏—Ç–∫–∞üéüÔ∏è")

		finally:
			handle_admin(call.message)

	elif call.data == 'decline':
		r.delete(f'ticket_id_{call.from_user.id}')
		bot.send_message(call.message.chat.id, "–ö–≤–∏—Ç–æ–∫ –≤—ñ–¥—Ö–∏–ª–µ–Ω üíÄ")
		handle_admin(call.message)

	elif call.data == 'create_event':
		try:
			saved_dict_json = r.get(f'event_data_{call.from_user.id}')
			saved_dict = json.loads(saved_dict_json)

			with Session(engine) as session:
				session.add(Event(**saved_dict))
				session.commit()
			r.delete(f'event_data_{call.from_user.id}')
			bot.send_message(call.message.chat.id, "–ó–∞—Ö—ñ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–æü™© ‚úÖ")
		except Exception as e:
			print(e)
			bot.send_message(call.message.chat.id, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∑–∞—Ö–æ–¥—É ‚ùå")

	elif call.data == 'eject_create_event':
		r.delete(f'event_data_{call.from_user.id}')

		bot.send_message(call.message.chat.id, "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—Ö–æ–¥—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ ‚ùå")

	elif call.data == 'check_ticket_buy_request':
		with Session(engine) as session:
			tickets = session.query(Ticket).filter(Ticket.confirmed.is_(None)).all()
			if tickets:
				for ticket in tickets:
					markup = types.InlineKeyboardMarkup()
					confirm_ticket = types.InlineKeyboardButton('‚úî', callback_data=f'confirmTicket_{ticket.ticket_id}')
					eject_ticket = types.InlineKeyboardButton('‚ùå', callback_data=f'ejectTicket_{ticket.ticket_id}')

					markup.add(confirm_ticket, eject_ticket)

					bot.send_message(call.message.chat.id, f"ID: {ticket.ticket_id}"
														   f"\nUser ID: {ticket.user_id}"
														   f"\nUsername: {ticket.username}"
														   f"\nFull name: {ticket.full_name}"
														   f"\nDate: {ticket.date}"
														   f"\nBank card: {ticket.bank_card}"
														   f"\nPrice: {ticket.price}", reply_markup=markup)

			else:
				bot.send_message(call.message.chat.id, "–ù–µ–º–∞ –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ –∫—É–ø—ñ–≤–ª—é –∫–≤–∏—Ç–∫–∞ üßê")
			session.commit()
			handle_admin(call.message)

	elif call.data.startswith('confirmTicket'):
		try:
			with Session(engine) as session:
				ticket = session.query(Ticket).filter(Ticket.ticket_id == call.data[14:]).first()

				ticket.confirmed = True
				session.commit()
				bot.send_message(call.message.chat.id, f"–ö–≤–∏—Ç–æ–∫ {ticket.ticket_id} –ø—Ä–∏–∏ÃÜ–Ω—è—Ç–∏–∏ÃÜ ‚úÖ")
				bot.delete_message(call.message.chat.id, call.message.message_id)
		except Exception as e:
			print(e)
			bot.send_message(call.message.chat.id, f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—ñ –∫–≤–∏—Ç–∫–∞ {ticket.ticket_id} ‚ùå")

	elif call.data.startswith('ejectTicket'):
		try:
			with Session(engine) as session:
				ticket = session.query(Ticket).filter(Ticket.ticket_id == call.data[12:]).first()

				ticket.confirmed = False
				session.commit()
				bot.send_message(call.message.chat.id, f"–ö–≤–∏—Ç–æ–∫ {ticket.ticket_id} –≤—ñ–¥—Ö–∏–ª–µ–Ω ‚úÖ")
				bot.delete_message(call.message.chat.id, call.message.message_id)
		except Exception as e:
			print(e)
			bot.send_message(call.message.chat.id, f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ã–¥—Ö–∏–ª–µ–Ω–Ω—ñ –∫–≤–∏—Ç–∫–∞ {ticket.ticket_id} ‚ùå")


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–ª–µ—Ç–∞
def check_ticket(message: Message):
	with Session(engine) as session:
		ticket = session.query(Ticket).filter(Ticket.ticket_id == message.text).first()
		if ticket:
			markup = types.InlineKeyboardMarkup()
			add_event = types.InlineKeyboardButton('‚úî', callback_data=f'accept')
			check_tickets = types.InlineKeyboardButton('‚ùå', callback_data=f'decline')

			markup.add(add_event, check_tickets)
			if ticket.confirmed is True:
				save_to_redis(r, f'ticket_id_{message.from_user.id}', ticket.ticket_id)
				bot.send_message(message.chat.id, f"ID: {ticket.ticket_id}"
												  f"\nUser ID: {ticket.user_id}"
												  f"\nUsername: {ticket.username}"
												  f"\nFull name: {ticket.full_name}"
												  f"\nDate: {ticket.date}"
												  f"\nBank card: {ticket.bank_card}"
												  f"\nPrice: {ticket.price}"
												  f"\nConfirmed: {ticket.confirmed}", reply_markup=markup)
			else:
				bot.send_message(message.chat.id, f"–ö–≤–∏—Ç–æ–∫ –±—É–≤ –≤—ñ–¥—Ö–∏–ª–µ–Ω –∞–±–æ –Ω–µ –ø—Ä–∏–π–Ω—è—Ç –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ‚ùå")
		else:
			bot.send_message(message.chat.id, "–ö–≤–∏—Ç–∫–∏ –Ω–µ –∑–Ω–∞–∏ÃÜ–¥–µ–Ω–∏ üôÖ‚Äç‚ôÄÔ∏è")


# –í–≤–æ–¥ –∫–∞—Ä—Ç—ã –ø—Ä–∏ –ø–æ–∫—É–ø–∫–∏
def bank_card_input(message: Message, promoter):
	bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î –ø–æ–≤–Ω–µ —ñ–º'—è...")

	ticket_data = {
		"date": f"{datetime.now().replace(microsecond=0)}",
		"ticket_id": randint(100000, 999999),
		"bank_card": message.text,
		"price": 250,
		"user_id": message.from_user.id,
		"username": message.from_user.username,
		"promoter": promoter if promoter in PROMOTERS else None,
	}

	bot.register_next_step_handler(message, full_name_input, ticket_data)


# –í–≤–æ–¥ –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–∏
def full_name_input(message: Message, ticket_data):
	full_name = message.text

	markup = types.InlineKeyboardMarkup()
	back_menu = types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_menu')

	markup.add(back_menu)

	ticket_data['full_name'] = full_name

	with Session(engine) as session:
		session.add(Ticket(**ticket_data))
		session.commit()

	bot.send_message(message.chat.id, f"–ü—Ä–∏–¥–±–∞–Ω–Ω—è –≤–∞—à–æ–≥–æ –∫–≤–∏—Ç–∫–∞ –±—É–ª–∞ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–Ω–∞!"
									  f"\n–í–∞—à –∫–≤–∏—Ç–æ–∫ –±—É–¥–µ –Ω–∏–∂—á–µ ‚¨á‚¨á‚¨á")
	bot.send_message(message.chat.id, f"–¢–∏–ø–æ–≤–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ü—ñ–Ω–∞ üí∏: {str(ticket_data['price'])}"
									  f"\n–ë–∞–Ω–∫–æ–≤—Å—å–∫–∞ –∫–∞—Ä—Ç–∫–∞ üí≥: {ticket_data['bank_card']}"
									  f"\n–ü–æ–≤–Ω–µ —ñ–º'—è üìÑ: {ticket_data['full_name']}"
									  f"\nID: {ticket_data['ticket_id']}", reply_markup=markup)

	handle_start(message)


# –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
def handle_event_name_input(message: Message):
	if message.from_user.id in ADMINS:
		event_data = {
			'event_name': message.text
		}
		bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –∑–∞—Ö–æ–¥–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ DD.MM.YYYY üìÜ")
		bot.register_next_step_handler(message, handle_date_input, event_data)


# –í–≤–æ–¥ –¥–∞—Ç—ã —Å–æ–±—ã—Ç–∏—è
def handle_date_input(message: Message, event_data):
	if message.from_user.id in ADMINS:
		bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –∑–≤–∏—á–∞–π–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å –∫–≤–∏—Ç–∫–∞ üíµ")
		event_data['event_date'] = message.text
		bot.register_next_step_handler(message, handle_price_default_input, event_data)


# –í–≤–æ–¥ —Ü–µ–Ω—ã –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
def handle_price_default_input(message: Message, event_data):
	if message.from_user.id in ADMINS:
		bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –≤–∞—Ä—Ç—ñ—Å—Ç—å VIP –∫–≤–∏—Ç–∫–∞ üí∞")
		event_data['event_price_default'] = message.text
		bot.register_next_step_handler(message, handle_price_vip_input, event_data)


# –í–≤–æ–¥ —Ü–µ–Ω—ã –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è –¥–ª—è VIP –±–∏–ª–µ—Ç–∞
def handle_price_vip_input(message: Message, event_data):
	if message.from_user.id in ADMINS:
		event_data['event_price_vip'] = message.text
		bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –≤–∞—Ä—Ç—ñ—Å—Ç—å –¥–µ–¥–ª–∞–∏ÃÜ–Ω –±–∏–ª–µ—Ç–∞ üìÖ")
		bot.register_next_step_handler(message, handle_price_deadline_input, event_data)


# –í–≤–æ–¥ —Ü–µ–Ω—ã –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –¥–µ–¥–ª–∞–∏ÃÜ–Ω –±–∏–ª–µ—Ç–∞
def handle_price_deadline_input(message: Message, event_data):
	if message.from_user.id in ADMINS:
		event_data['event_price_deadline'] = message.text

		bot.send_message(message.chat.id, "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—Ö–æ–¥—É ‚úÖ")

		markup = types.InlineKeyboardMarkup()
		create_event = types.InlineKeyboardButton('‚úî', callback_data=f'create_event')
		delete_data = types.InlineKeyboardButton('‚ùå', callback_data=f'eject_create_event')

		save_dict_to_redis(r, f'event_data_{message.from_user.id}', event_data)

		markup.add(create_event, delete_data)
		bot.send_message(message.chat.id, f"–ù–∞–∑–≤–∞ –∑–∞—Ö–æ–¥—É üñä: {event_data['event_name']}"
										  f"\n –î–∞—Ç–∞ üìÜ: {event_data['event_date']}"
										  f"\n –¢–∏–ø–æ–≤–∞ —Ü—ñ–Ω–∞ üíµ: {event_data['event_price_default']}"
										  f"\n –í—ñ–ø —Ü—ñ–Ω–∞ üí∏: {event_data['event_price_vip']}"
										  f"\n –¶—ñ–Ω–∞ –∫—ñ–Ω—Ü–µ–≤–æ–≥–æ —Ç–µ—Ä–º—ñ–Ω—É üíµ: {event_data['event_price_deadline']}",
						 reply_markup=markup)

		handle_admin(message)


if __name__ == '__main__':
	bot.polling()
